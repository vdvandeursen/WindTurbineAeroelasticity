Index: Assignment A/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from structural_model import StructuralModel\r\nfrom bem import BEM\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.ticker import FuncFormatter,ScalarFormatter\r\nimport os\r\n\r\nsave_plot = True\r\nfolder_path = r\"C:\\Users\\olegr\\Documents\\0. AE Master Wind Energy\\Q4 AE4W21-14 Wind Turbine Aeroelasticity\\Assignements\"\r\nos.makedirs(folder_path, exist_ok=True)\r\ndef one_decimal(x, pos):\r\n    return f'{x:.1f}'\r\n\r\ndef plot_saver(plot_name, save_plot):\r\n    if save_plot:\r\n        plt.tight_layout()\r\n        plt.savefig(os.path.join(folder_path, f'{plot_name}.pdf'))\r\n        plt.close()\r\n    else:\r\n        plt.title(plot_name)\r\n        plt.tight_layout()\r\n        plt.show()\r\n\r\ndef adjust_x_y_ticks(start_plot,end_time):\r\n    plt.xlim(start_plot,end_time)\r\n    plt.xticks(range(start_plot, end_time+ 1, 20),  # Tick positions\r\n               range(0, end_time - start_plot + 1, 20))  # Tick labels\r\n    ax = plt.gca()\r\n    ax.yaxis.set_major_formatter(ScalarFormatter(useMathText=True))\r\n    ax.yaxis.get_offset_text().set_fontsize(10)\r\n    ax.ticklabel_format(axis='y', style='sci', scilimits=(0, 0))\r\n\r\nif __name__ == '__main__':\r\n    v0 = np.array([3, 4, 5, 6, 7, 8, 9, 10, 11, 11.4, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\r\n    rotational_frequancies = np.array(\r\n        [5.7173, 6.9957, 7.470993355, 7.887136213, 8.396777409, 9.014936877, 10.14196013, 11.27405316, 11.85744186,\r\n         12.1, 12.10207641, 12.10166113, 12.10111296, 12.10069767, 12.10004983, 12.09983389, 12.09961794, 12.09928571,\r\n         12.09950166, 12.09960133, 12.09965116, 12.09975083, 12.09945183, 12.09956811])\r\n\r\n    rotational_frequancies = rotational_frequancies / 60 * 2 * np.pi\r\n\r\n    pitch_angles = np.array(\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.83, 6.6, 8.7, 10.45, 12.06, 13.54, 14.92, 16.23, 17.47, 18.68, 19.85, 21.02,\r\n         22.12, 23.15])\r\n\r\n    structural_model = StructuralModel(filepath='./Assignment A/structural_data.csv')\r\n\r\n\r\n    print(f'Nat freqs: {structural_model.natural_frequencies}')\r\n\r\n    labels = ['Flapwise displacement', 'Edgewise displacement', 'Flapwise force', 'Edgewise force','Root bending moment' ]\r\n    colors = [\"tab:blue\",\"tab:orange\",\"tab:green\",\"tab:red\",\"tab:purple\"]\r\n    plt.figure()\r\n    N_T = 1000/400\r\n    start_time = 0\r\n    start_plot = 400 # time from where you want to plot the output\r\n    end_time = 500\r\n    timestamps = np.linspace(0, end_time, int(end_time * N_T))\r\n\r\n    N = len(timestamps[int(start_plot * N_T):int(end_time * N_T)])\r\n    T = timestamps[1] - timestamps[0]\r\n\r\n    frequencies = np.fft.fftfreq(N, T)\r\n    initial_conditions = np.array([0,0,0,0])\r\n\r\n    flap_dis_no_stiff = []\r\n    edge_dis_no_stiff = []\r\n    flap_vel_no_stiff = []\r\n    edge_vel_no_stiff = []\r\n\r\n    #Static displacement for varyind wind speed 3-25 m/s\r\n    for v, omega, pitch in zip(v0, rotational_frequancies, pitch_angles):\r\n        res, Mn, FF, FE = structural_model.calculate_time_response_static_load(timestamps,initial_conditions,v,omega,pitch,geometric_stiffness=False)\r\n        flap_dis_no_stiff.append(res.y[0,-1])\r\n        edge_dis_no_stiff.append(res.y[1,-1])\r\n        flap_vel_no_stiff.append(res.y[2, -1])\r\n        edge_vel_no_stiff.append(res.y[3, -1])\r\n\r\n    plt.plot(v0,flap_dis_no_stiff,label=f'{labels[0]}',color=colors[0])\r\n    plt.plot(v0,edge_dis_no_stiff,label=f'{labels[1]}',color=colors[1])\r\n    plt.legend(loc='upper right')\r\n    plt.grid()\r\n    plt.gca().yaxis.set_major_formatter(FuncFormatter(one_decimal))\r\n    plt.xlabel(\"Wind Speed [m/s]\")\r\n    plt.xlim(v0[0], v0[-1])\r\n    plt.ylabel(\"Displacement [m]\")\r\n    plot_name = \"Static_displacement_no_geo_stiffening\"\r\n    plot_saver(plot_name,save_plot)\r\n\r\n    flap_dis_with_stiff = []\r\n    edge_dis_with_stiff = []\r\n    flap_vel_with_stiff = []\r\n    edge_vel_with_stiff = []\r\n    #Static displacement for varyind wind speed 3-25 m/s with geometric stiffness\r\n    for v, omega, pitch in zip(v0, rotational_frequancies, pitch_angles):\r\n        res, Mn, FF, FE = structural_model.calculate_time_response_static_load(timestamps,initial_conditions,v,omega,pitch,geometric_stiffness=True)\r\n        flap_dis_with_stiff.append(res.y[0,-1])\r\n        edge_dis_with_stiff.append(res.y[1,-1])\r\n        flap_vel_with_stiff.append(res.y[2, -1])\r\n        edge_vel_with_stiff.append(res.y[3, -1])\r\n\r\n    plt.plot(v0,flap_dis_with_stiff,label=f'{labels[0]}',color=colors[0])\r\n    plt.plot(v0,edge_dis_with_stiff,label=f'{labels[1]}',color=colors[1])\r\n    plt.legend(loc='upper right')\r\n    plt.grid()\r\n    plt.gca().yaxis.set_major_formatter(FuncFormatter(one_decimal))\r\n    plt.xlabel(\"Wind Speed [m/s]\")\r\n    plt.xlim(v0[0],v0[-1])\r\n    plt.ylabel(\"Displacement [m]\")\r\n    plot_name = \"Static_displacement_with_geo_stiffening\"\r\n    plot_saver(plot_name,save_plot)\r\n\r\n    #extra plots\r\n    max_flap_no_stiff = np.max(flap_dis_no_stiff)\r\n    max_flap_with_stiff = np.max(flap_dis_with_stiff)\r\n    plt.plot(v0, flap_dis_no_stiff/max_flap_no_stiff , label='Without geometrical stiffening', color=colors[0])\r\n    plt.plot(v0,flap_dis_with_stiff/max_flap_with_stiff, label='With geometrical stiffening', color=colors[0],linestyle=\"--\")\r\n    plt.legend(loc='upper right')\r\n    plt.grid()\r\n    plt.gca().yaxis.set_major_formatter(FuncFormatter(one_decimal))\r\n    plt.xlabel(\"Wind Speed [m/s]\")\r\n    plt.xlim(v0[0],v0[-1])\r\n    plt.ylabel(\"Normalized flapwise displacement [-]\")\r\n    plot_name = \"Static_displacement_flapwise\"\r\n    plot_saver(plot_name,save_plot)\r\n\r\n    max_edge_no_stiff = np.max(edge_dis_no_stiff)\r\n    max_edge_with_stiff = np.max(edge_dis_with_stiff)\r\n    plt.plot(v0, edge_dis_no_stiff/max_edge_no_stiff, label='Without geometrical stiffening',  color=colors[1])\r\n    plt.plot(v0,edge_dis_with_stiff/max_edge_with_stiff, label='With geometrical stiffening', color=colors[1],linestyle=\"--\")\r\n    plt.legend(loc='upper right')\r\n    plt.grid()\r\n    plt.gca().yaxis.set_major_formatter(FuncFormatter(one_decimal))\r\n    plt.xlabel(\"Wind Speed [m/s]\")\r\n    plt.xlim(v0[0],v0[-1])\r\n    plt.ylabel(\"Normalized edgewise displacement [-]\")\r\n    plot_name = \"Static_displacement_edgewise\"\r\n    plot_saver(plot_name,save_plot)\r\n    \r\n    wind_speed_dynamic = 15 # m/s\r\n    index_v0 = np.where(v0 == wind_speed_dynamic)[0][0]\r\n\r\n    initial_conditions = np.array([flap_dis_with_stiff[index_v0],edge_dis_with_stiff[index_v0],flap_vel_with_stiff[index_v0],edge_vel_with_stiff[index_v0]])\r\n\r\n    #Constant velocity of 15 m/s without taking into account the blade velocity\r\n    res, Mn, FF, FE = structural_model.calculate_time_response_static_load(timestamps, initial_conditions, v0[index_v0],rotational_frequancies[index_v0],pitch_angles[index_v0],geometric_stiffness=True)\r\n\r\n    #Plotting Displacement\r\n    plt.plot(res.t[int(start_plot * N_T):int(end_time * N_T)], res.y[0, int(start_plot * N_T):int(end_time * N_T)], label=f'{labels[0]}',color=colors[0])\r\n    plt.legend(loc='upper right')\r\n    plt.grid()\r\n    adjust_x_y_ticks(start_plot,end_time)\r\n    plt.xlabel(\"Time [s]\")\r\n    plt.ylabel(\"Tip displacement [m]\")\r\n    plot_name = \"Flapwise_displacement_no_blade_velocities\"\r\n    plot_saver(plot_name,save_plot)\r\n\r\n    plt.plot(res.t[int(start_plot * N_T):int(end_time * N_T)], res.y[1, int(start_plot * N_T):int(end_time * N_T)], label=f'{labels[1]}',color=colors[1])\r\n    plt.legend(loc='upper right')\r\n    plt.grid()\r\n    adjust_x_y_ticks(start_plot,end_time)\r\n    plt.xlabel(\"Time [s]\")\r\n    plt.ylabel(\"Tip displacement [m]\")\r\n    plot_name = \"Edgewise_displacement_no_blade_velocities\"\r\n    plot_saver(plot_name,save_plot)\r\n\r\n\r\n\r\n    #Constant velocity of 15 m/s with taking into account the blade velocity\r\n    res, Mn_lst, FF_lst, FE_lst= structural_model.calculate_time_response_dynamic_load(timestamps,initial_conditions,v0[index_v0],rotational_frequancies[index_v0],pitch_angles[index_v0],periodic=False,blade_velocities=True,geometric_stiffness=True)\r\n    #Time Plot displacement\r\n    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)], res[0, int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[0]}', color=colors[0])\r\n    plt.legend(loc='upper right')\r\n    plt.grid()\r\n    adjust_x_y_ticks(start_plot,end_time)\r\n    plt.xlabel(\"Time [s]\")\r\n    plt.ylabel(\"Tip displacement [m]\")\r\n    plot_name = \"Flapwise_displacement_constant_15ms_with_blade_velocity\"\r\n    plot_saver(plot_name,save_plot)\r\n\r\n    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)], res[1, int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[1]}', color=colors[1])\r\n    plt.legend(loc='upper right')\r\n    plt.grid()\r\n    adjust_x_y_ticks(start_plot,end_time)\r\n    plt.xlabel(\"Time [s]\")\r\n    plt.ylabel(\"Tip displacement [m]\")\r\n    plot_name = \"Edgewise_displacement_constant_15ms_with_blade_velocity\"\r\n    plot_saver(plot_name,save_plot)\r\n\r\n    #Time plot Forces and Moments\r\n    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)-1],FF_lst[int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[2]}', color=colors[2])\r\n    plt.legend(loc='upper right')\r\n    plt.grid()\r\n    adjust_x_y_ticks(start_plot,end_time)\r\n    plt.xlabel(\"Time [s]\")\r\n    plt.ylabel(\"Force at tip [N]\")\r\n    plot_name = \"Flapwise_force_constant_15ms_with_blade_velocity\"\r\n    plot_saver(plot_name,save_plot)\r\n\r\n    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)-1],FE_lst[int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[3]}', color=colors[3])\r\n    plt.legend(loc='upper right')\r\n    plt.grid()\r\n    adjust_x_y_ticks(start_plot,end_time)\r\n    plt.xlabel(\"Time [s]\")\r\n    plt.ylabel(\"Force at tip [N]\")\r\n    plot_name = \"Edgewise_force_constant_15ms_with_blade_velocity\"\r\n    plot_saver(plot_name,save_plot)\r\n\r\n    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)-1],Mn_lst[int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[4]}', color=colors[4])\r\n    plt.legend(loc='upper right')\r\n    plt.grid()\r\n    adjust_x_y_ticks(start_plot, end_time)\r\n    plt.xlabel(\"Time [s]\")\r\n    plt.ylabel(\"Moment [Nm m]\")\r\n    plot_name = \"Root_bending_moment_constant_15ms_with_blade_velocity\"\r\n    plot_saver(plot_name,save_plot)\r\n\r\n    #Frequency Plot\r\n    for i in range(2):\r\n        fft_values = np.fft.fft(res[i,int(start_plot * N_T):int(end_time * N_T)])\r\n        magnitude = np.abs(fft_values)\r\n        plt.plot(frequencies[0:N//2-1], 2*magnitude[0:N//2-1], label=f'{labels[i]}',color=colors[i])\r\n    plt.yscale('log')\r\n    plt.legend(loc='upper right')\r\n    plt.grid()\r\n    plt.xlabel(\"Frequency [Hz]\")\r\n    plt.ylabel(\"Magnitude [-] \")\r\n    plot_name = \"Frequency_plot_constant_15ms_with_blade_velocity\"\r\n    plot_saver(plot_name,save_plot)\r\n\r\n\r\n    #Varying velocity around 15 m/s without taking into account the blade velocity\r\n    res, Mn_lst, FF_lst, FE_lst = structural_model.calculate_time_response_dynamic_load(timestamps,initial_conditions,v0[index_v0],rotational_frequancies[index_v0],pitch_angles[index_v0],periodic=True,blade_velocities=False,geometric_stiffness=True)\r\n    #Time Plot displacement\r\n    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)], res[0, int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[0]}', color=colors[0])\r\n    plt.legend(loc='upper right')\r\n    plt.grid()\r\n    adjust_x_y_ticks(start_plot, end_time)\r\n    plt.xlabel(\"Time [s]\")\r\n    plt.ylabel(\"Tip displacement [m]\")\r\n    plot_name = \"Flapwise_displacement_varying_15ms_no_blade_velocity\"\r\n    plot_saver(plot_name,save_plot)\r\n\r\n    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)], res[1, int(start_plot * N_T):int(end_time * N_T)],\r\n             label=f'{labels[1]}', color=colors[1])\r\n    plt.legend(loc='upper right')\r\n    plt.grid()\r\n    adjust_x_y_ticks(start_plot, end_time)\r\n    plt.xlabel(\"Time [s]\")\r\n    plt.ylabel(\"Tip displacement [m]\")\r\n    plot_name = \"Edgewise_displacement_varying_15ms_no_blade_velocity\"\r\n    plot_saver(plot_name,save_plot)\r\n\r\n    #Varying velocity around 15 m/s with taking into account the blade velocity\r\n    res, Mn_lst, FF_lst, FE_lst = structural_model.calculate_time_response_dynamic_load(timestamps,initial_conditions,v0[index_v0],rotational_frequancies[index_v0],pitch_angles[index_v0],periodic=True,blade_velocities=True,geometric_stiffness=True)\r\n    #Time Plot Displacement\r\n    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)], res[0, int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[0]}', color=colors[0])\r\n    plt.legend(loc='upper right')\r\n    plt.grid()\r\n    adjust_x_y_ticks(start_plot, end_time)\r\n    plt.xlabel(\"Time [s]\")\r\n    plt.ylabel(\"Tip displacement [m]\")\r\n    plot_name = \"Flapwise_displacement_varying_15ms_with_blade_velocity\"\r\n    plot_saver(plot_name,save_plot)\r\n\r\n    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)], res[1, int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[1]}', color=colors[1])\r\n    plt.legend(loc='upper right')\r\n    plt.grid()\r\n    adjust_x_y_ticks(start_plot, end_time)\r\n    plt.xlabel(\"Time [s]\")\r\n    plt.ylabel(\"Tip displacement [m]\")\r\n    plot_name = \"Edgewise_displacement_varying_15ms_with_blade_velocity\"\r\n    plot_saver(plot_name,save_plot)\r\n\r\n    # Time plot Forces and Moments\r\n    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)-1],FF_lst[int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[2]}', color=colors[2])\r\n    plt.legend(loc='upper right')\r\n    plt.grid()\r\n    adjust_x_y_ticks(start_plot, end_time)\r\n    plt.xlabel(\"Time [s]\")\r\n    plt.ylabel(\"Force at tip [N]\")\r\n    plot_name = \"Flapwise_force_varying_15ms_with_blade_velocity\"\r\n    plot_saver(plot_name,save_plot)\r\n\r\n    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)-1],FE_lst[int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[3]}', color=colors[3])\r\n    plt.legend(loc='upper right')\r\n    plt.grid()\r\n    adjust_x_y_ticks(start_plot, end_time)\r\n    plt.xlabel(\"Time [s]\")\r\n    plt.ylabel(\"Force at tip [N]\")\r\n    plot_name = \"Edgewise_force_varying_15ms_with_blade_velocity\"\r\n    plot_saver(plot_name,save_plot)\r\n\r\n    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)-1],Mn_lst[int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[4]}', color=colors[4])\r\n    plt.legend(loc='upper right')\r\n    plt.grid()\r\n    adjust_x_y_ticks(start_plot, end_time)\r\n    plt.xlabel(\"Time [s]\")\r\n    plt.ylabel(\"Moment [Nm m]\")\r\n    plot_name = \"Root_bending_moment_varying_15ms_with_blade_velocity\"\r\n    plot_saver(plot_name,save_plot)\r\n\r\n    #Frequency Plot\r\n    for i in range(2):\r\n        fft_values = np.fft.fft(res[i,int(start_plot * N_T):int(end_time * N_T)])\r\n        magnitude = np.abs(fft_values)\r\n        plt.plot(frequencies[0:N//2-1], 2*magnitude[0:N//2-1], label=f'{labels[i]}',color=colors[i])\r\n    plt.yscale('log')\r\n    plt.legend(loc='upper right')\r\n    plt.grid()\r\n    plt.xlabel(\"Frequency [Hz]\")\r\n    plt.ylabel(\"Magnitude [-] \")\r\n    plot_name = \"Frequency_plot_varying_15ms_with_blade_velocity\"\r\n    plot_saver(plot_name,save_plot)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Assignment A/main.py b/Assignment A/main.py
--- a/Assignment A/main.py	(revision 1162648de3541a7397a14b55a65fe05e5f31d5f4)
+++ b/Assignment A/main.py	(date 1718986638444)
@@ -4,6 +4,8 @@
 import matplotlib.pyplot as plt
 from matplotlib.ticker import FuncFormatter,ScalarFormatter
 import os
+import itertools
+
 
 save_plot = True
 folder_path = r"C:\Users\olegr\Documents\0. AE Master Wind Energy\Q4 AE4W21-14 Wind Turbine Aeroelasticity\Assignements"
@@ -110,7 +112,7 @@
     plot_name = "Static_displacement_with_geo_stiffening"
     plot_saver(plot_name,save_plot)
 
-    #extra plots
+    #extra plots static displacement
     max_flap_no_stiff = np.max(flap_dis_no_stiff)
     max_flap_with_stiff = np.max(flap_dis_with_stiff)
     plt.plot(v0, flap_dis_no_stiff/max_flap_no_stiff , label='Without geometrical stiffening', color=colors[0])
@@ -136,159 +138,73 @@
     plt.ylabel("Normalized edgewise displacement [-]")
     plot_name = "Static_displacement_edgewise"
     plot_saver(plot_name,save_plot)
-    
+
     wind_speed_dynamic = 15 # m/s
     index_v0 = np.where(v0 == wind_speed_dynamic)[0][0]
 
-    initial_conditions = np.array([flap_dis_with_stiff[index_v0],edge_dis_with_stiff[index_v0],flap_vel_with_stiff[index_v0],edge_vel_with_stiff[index_v0]])
-
-    #Constant velocity of 15 m/s without taking into account the blade velocity
-    res, Mn, FF, FE = structural_model.calculate_time_response_static_load(timestamps, initial_conditions, v0[index_v0],rotational_frequancies[index_v0],pitch_angles[index_v0],geometric_stiffness=True)
-
-    #Plotting Displacement
-    plt.plot(res.t[int(start_plot * N_T):int(end_time * N_T)], res.y[0, int(start_plot * N_T):int(end_time * N_T)], label=f'{labels[0]}',color=colors[0])
-    plt.legend(loc='upper right')
-    plt.grid()
-    adjust_x_y_ticks(start_plot,end_time)
-    plt.xlabel("Time [s]")
-    plt.ylabel("Tip displacement [m]")
-    plot_name = "Flapwise_displacement_no_blade_velocities"
-    plot_saver(plot_name,save_plot)
-
-    plt.plot(res.t[int(start_plot * N_T):int(end_time * N_T)], res.y[1, int(start_plot * N_T):int(end_time * N_T)], label=f'{labels[1]}',color=colors[1])
-    plt.legend(loc='upper right')
-    plt.grid()
-    adjust_x_y_ticks(start_plot,end_time)
-    plt.xlabel("Time [s]")
-    plt.ylabel("Tip displacement [m]")
-    plot_name = "Edgewise_displacement_no_blade_velocities"
-    plot_saver(plot_name,save_plot)
-
-
-
-    #Constant velocity of 15 m/s with taking into account the blade velocity
-    res, Mn_lst, FF_lst, FE_lst= structural_model.calculate_time_response_dynamic_load(timestamps,initial_conditions,v0[index_v0],rotational_frequancies[index_v0],pitch_angles[index_v0],periodic=False,blade_velocities=True,geometric_stiffness=True)
-    #Time Plot displacement
-    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)], res[0, int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[0]}', color=colors[0])
-    plt.legend(loc='upper right')
-    plt.grid()
-    adjust_x_y_ticks(start_plot,end_time)
-    plt.xlabel("Time [s]")
-    plt.ylabel("Tip displacement [m]")
-    plot_name = "Flapwise_displacement_constant_15ms_with_blade_velocity"
-    plot_saver(plot_name,save_plot)
-
-    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)], res[1, int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[1]}', color=colors[1])
-    plt.legend(loc='upper right')
-    plt.grid()
-    adjust_x_y_ticks(start_plot,end_time)
-    plt.xlabel("Time [s]")
-    plt.ylabel("Tip displacement [m]")
-    plot_name = "Edgewise_displacement_constant_15ms_with_blade_velocity"
-    plot_saver(plot_name,save_plot)
-
-    #Time plot Forces and Moments
-    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)-1],FF_lst[int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[2]}', color=colors[2])
-    plt.legend(loc='upper right')
-    plt.grid()
-    adjust_x_y_ticks(start_plot,end_time)
-    plt.xlabel("Time [s]")
-    plt.ylabel("Force at tip [N]")
-    plot_name = "Flapwise_force_constant_15ms_with_blade_velocity"
-    plot_saver(plot_name,save_plot)
-
-    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)-1],FE_lst[int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[3]}', color=colors[3])
-    plt.legend(loc='upper right')
-    plt.grid()
-    adjust_x_y_ticks(start_plot,end_time)
-    plt.xlabel("Time [s]")
-    plt.ylabel("Force at tip [N]")
-    plot_name = "Edgewise_force_constant_15ms_with_blade_velocity"
-    plot_saver(plot_name,save_plot)
-
-    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)-1],Mn_lst[int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[4]}', color=colors[4])
-    plt.legend(loc='upper right')
-    plt.grid()
-    adjust_x_y_ticks(start_plot, end_time)
-    plt.xlabel("Time [s]")
-    plt.ylabel("Moment [Nm m]")
-    plot_name = "Root_bending_moment_constant_15ms_with_blade_velocity"
-    plot_saver(plot_name,save_plot)
+def core_code(periodic_yes_no,blade_velocities_yes_no,geometric_stiffness_yes_no):
+    print(f"RUNNING CODE: Periodic wind: {periodic_yes_no}, Blade velocity: {blade_velocities_yes_no}, Geometric Stiffness: {geometric_stiffness_yes_no}")
+
+    if periodic_yes_no:
+        add_periodic = True
+        name_periodic = "periodic_15_ms"
+    else:
+        add_periodic = False
+        name_periodic = "const_15_ms"
+    if blade_velocities_yes_no:
+        add_blade_vel = True
+        name_blade_vel = "with_blade_vel"
+    else:
+        add_blade_vel = False
+        name_blade_vel = "no_blade_vel"
+
+    if geometric_stiffness_yes_no:
+        initial_conditions = np.array([flap_dis_with_stiff[index_v0],edge_dis_with_stiff[index_v0],flap_vel_with_stiff[index_v0],edge_vel_with_stiff[index_v0]])
+        add_geo_stiff = True
+        name_geo = "with_geo_stiff"
+    else:
+        initial_conditions = np.array([flap_dis_no_stiff[index_v0], edge_dis_no_stiff[index_v0], flap_vel_no_stiff[index_v0], edge_vel_no_stiff[index_v0]])
+        add_geo_stiff = False
+        name_geo = "no_geo_stiff"
 
-    #Frequency Plot
-    for i in range(2):
-        fft_values = np.fft.fft(res[i,int(start_plot * N_T):int(end_time * N_T)])
-        magnitude = np.abs(fft_values)
-        plt.plot(frequencies[0:N//2-1], 2*magnitude[0:N//2-1], label=f'{labels[i]}',color=colors[i])
-    plt.yscale('log')
-    plt.legend(loc='upper right')
-    plt.grid()
-    plt.xlabel("Frequency [Hz]")
-    plt.ylabel("Magnitude [-] ")
-    plot_name = "Frequency_plot_constant_15ms_with_blade_velocity"
-    plot_saver(plot_name,save_plot)
-
-
-    #Varying velocity around 15 m/s without taking into account the blade velocity
-    res, Mn_lst, FF_lst, FE_lst = structural_model.calculate_time_response_dynamic_load(timestamps,initial_conditions,v0[index_v0],rotational_frequancies[index_v0],pitch_angles[index_v0],periodic=True,blade_velocities=False,geometric_stiffness=True)
+    #Generate results
+    res, Mn_lst, FF_lst, FE_lst= structural_model.calculate_time_response_dynamic_load(timestamps,initial_conditions,v0[index_v0],rotational_frequancies[index_v0],pitch_angles[index_v0],periodic=add_periodic,blade_velocities=add_blade_vel,geometric_stiffness=add_geo_stiff)
     #Time Plot displacement
     plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)], res[0, int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[0]}', color=colors[0])
     plt.legend(loc='upper right')
     plt.grid()
-    adjust_x_y_ticks(start_plot, end_time)
+    adjust_x_y_ticks(start_plot,end_time)
     plt.xlabel("Time [s]")
     plt.ylabel("Tip displacement [m]")
-    plot_name = "Flapwise_displacement_varying_15ms_no_blade_velocity"
-    plot_saver(plot_name,save_plot)
-
-    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)], res[1, int(start_plot * N_T):int(end_time * N_T)],
-             label=f'{labels[1]}', color=colors[1])
-    plt.legend(loc='upper right')
-    plt.grid()
-    adjust_x_y_ticks(start_plot, end_time)
-    plt.xlabel("Time [s]")
-    plt.ylabel("Tip displacement [m]")
-    plot_name = "Edgewise_displacement_varying_15ms_no_blade_velocity"
-    plot_saver(plot_name,save_plot)
-
-    #Varying velocity around 15 m/s with taking into account the blade velocity
-    res, Mn_lst, FF_lst, FE_lst = structural_model.calculate_time_response_dynamic_load(timestamps,initial_conditions,v0[index_v0],rotational_frequancies[index_v0],pitch_angles[index_v0],periodic=True,blade_velocities=True,geometric_stiffness=True)
-    #Time Plot Displacement
-    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)], res[0, int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[0]}', color=colors[0])
-    plt.legend(loc='upper right')
-    plt.grid()
-    adjust_x_y_ticks(start_plot, end_time)
-    plt.xlabel("Time [s]")
-    plt.ylabel("Tip displacement [m]")
-    plot_name = "Flapwise_displacement_varying_15ms_with_blade_velocity"
+    plot_name = "Flapwise_disp_{}_{}_{}".format(name_periodic,name_blade_vel,name_geo)
     plot_saver(plot_name,save_plot)
 
     plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)], res[1, int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[1]}', color=colors[1])
     plt.legend(loc='upper right')
     plt.grid()
-    adjust_x_y_ticks(start_plot, end_time)
+    adjust_x_y_ticks(start_plot,end_time)
     plt.xlabel("Time [s]")
     plt.ylabel("Tip displacement [m]")
-    plot_name = "Edgewise_displacement_varying_15ms_with_blade_velocity"
+    plot_name = "Edgewise_disp_{}_{}_{}".format(name_periodic,name_blade_vel,name_geo)
     plot_saver(plot_name,save_plot)
 
-    # Time plot Forces and Moments
+    #Time plot Forces and Moments
     plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)-1],FF_lst[int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[2]}', color=colors[2])
     plt.legend(loc='upper right')
     plt.grid()
-    adjust_x_y_ticks(start_plot, end_time)
+    adjust_x_y_ticks(start_plot,end_time)
     plt.xlabel("Time [s]")
     plt.ylabel("Force at tip [N]")
-    plot_name = "Flapwise_force_varying_15ms_with_blade_velocity"
+    plot_name = "Flapwise_force_{}_{}_{}".format(name_periodic,name_blade_vel,name_geo)
     plot_saver(plot_name,save_plot)
 
     plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)-1],FE_lst[int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[3]}', color=colors[3])
     plt.legend(loc='upper right')
     plt.grid()
-    adjust_x_y_ticks(start_plot, end_time)
+    adjust_x_y_ticks(start_plot,end_time)
     plt.xlabel("Time [s]")
     plt.ylabel("Force at tip [N]")
-    plot_name = "Edgewise_force_varying_15ms_with_blade_velocity"
+    plot_name = "Edgewise_force_{}_{}_{}".format(name_periodic,name_blade_vel,name_geo)
     plot_saver(plot_name,save_plot)
 
     plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)-1],Mn_lst[int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[4]}', color=colors[4])
@@ -297,7 +213,7 @@
     adjust_x_y_ticks(start_plot, end_time)
     plt.xlabel("Time [s]")
     plt.ylabel("Moment [Nm m]")
-    plot_name = "Root_bending_moment_varying_15ms_with_blade_velocity"
+    plot_name = "Root_bend_moment_{}_{}_{}".format(name_periodic,name_blade_vel,name_geo)
     plot_saver(plot_name,save_plot)
 
     #Frequency Plot
@@ -310,5 +226,12 @@
     plt.grid()
     plt.xlabel("Frequency [Hz]")
     plt.ylabel("Magnitude [-] ")
-    plot_name = "Frequency_plot_varying_15ms_with_blade_velocity"
+    plot_name = "Frequency_plot_{}_{}_{}".format(name_periodic,name_blade_vel,name_geo)
     plot_saver(plot_name,save_plot)
+
+# Generate all combinations of True and False for three variables
+combinations_variables = list(itertools.product([True, False], repeat=3))
+
+# Iterate over each combination and run the code
+for combo in combinations_variables:
+    core_code(*combo)
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"687e0206-750b-414c-aadd-88a0165e4019\" name=\"Changes\" comment=\"Updated fourier transforms\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/WindTurbineAeroelasticity.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/WindTurbineAeroelasticity.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Assignment A/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Assignment A/main.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;PatrickRoel&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/vdvandeursen/WindTurbineAeroelasticity.git&quot;,\r\n    &quot;accountId&quot;: &quot;b3bab87f-8668-42be-8326-c732d75d6612&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 1\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2h8Iz0YN0pb7rArSDvqJqnC49nG\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n    <option name=\"showMembers\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Python.bem_1.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.main.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/roele/PycharmProjects/WindTurbineAeroelasticity&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.lookFeel&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\roele\\PycharmProjects\\WindTurbineAeroelasticity\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\vince\\PycharmProjects\\Studie\\WindTurbineAeroelasticity\\Assignment A\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.main\">\r\n    <configuration name=\"bem_1\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"WindTurbineAeroelasticity\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/bem_1.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"WindTurbineAeroelasticity\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Assignment A/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Python.main\" />\r\n      <item itemvalue=\"Python.bem_1\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.bem_1\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-48aec45f0201-746f403e7f0c-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-241.17011.127\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"687e0206-750b-414c-aadd-88a0165e4019\" name=\"Changes\" comment=\"\" />\r\n      <created>1716969535815</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1716969535815</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Added blade data\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716971004498</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716971004498</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"shape functions early work\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716971603358</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716971603358</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"shape functions early work\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716972164244</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716972164244</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"structural model work in progress\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716973475778</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716973475778</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"structural model work in progress\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716975860805</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716975860805</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"structural model work in progress\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1716994894758</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1716994894758</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"bem more readable\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1717000533486</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1717000533486</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Update static plot\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1718872284707</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1718872284707</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Updated fourier transforms\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1718879523603</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1718879523603</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"10\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.History.Properties\">\r\n    <option name=\"COLUMN_ID_ORDER\">\r\n      <list>\r\n        <option value=\"Default.Root\" />\r\n        <option value=\"Default.Author\" />\r\n        <option value=\"Default.Date\" />\r\n        <option value=\"Default.Subject\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Added blade data\" />\r\n    <MESSAGE value=\"shape functions early work\" />\r\n    <MESSAGE value=\"structural model work in progress\" />\r\n    <MESSAGE value=\"bem broken?\" />\r\n    <MESSAGE value=\"bem more readable\" />\r\n    <MESSAGE value=\"Update static plot\" />\r\n    <MESSAGE value=\"Updated fourier transforms\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Updated fourier transforms\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <watches-manager>\r\n      <configuration name=\"PythonConfigurationType\">\r\n        <watch expression=\"x\" />\r\n        <watch expression=\"__exception__\" />\r\n      </configuration>\r\n    </watches-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 1162648de3541a7397a14b55a65fe05e5f31d5f4)
+++ b/.idea/workspace.xml	(date 1718986132837)
@@ -4,9 +4,8 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="687e0206-750b-414c-aadd-88a0165e4019" name="Changes" comment="Updated fourier transforms">
-      <change beforePath="$PROJECT_DIR$/.idea/WindTurbineAeroelasticity.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/WindTurbineAeroelasticity.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+    <list default="true" id="687e0206-750b-414c-aadd-88a0165e4019" name="Changes" comment="Update graph plotting and automatic saving all graphs">
+      <change afterPath="$PROJECT_DIR$/Assignment A/old_main.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Assignment A/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/Assignment A/main.py" afterDir="false" />
     </list>
@@ -208,7 +207,15 @@
       <option name="project" value="LOCAL" />
       <updated>1718879523603</updated>
     </task>
-    <option name="localTasksCounter" value="10" />
+    <task id="LOCAL-00010" summary="Update graph plotting and automatic saving all graphs">
+      <option name="closed" value="true" />
+      <created>1718974464097</created>
+      <option name="number" value="00010" />
+      <option name="presentableId" value="LOCAL-00010" />
+      <option name="project" value="LOCAL" />
+      <updated>1718974464097</updated>
+    </task>
+    <option name="localTasksCounter" value="11" />
     <servers />
   </component>
   <component name="Vcs.Log.History.Properties">
@@ -240,7 +247,8 @@
     <MESSAGE value="bem more readable" />
     <MESSAGE value="Update static plot" />
     <MESSAGE value="Updated fourier transforms" />
-    <option name="LAST_COMMIT_MESSAGE" value="Updated fourier transforms" />
+    <MESSAGE value="Update graph plotting and automatic saving all graphs" />
+    <option name="LAST_COMMIT_MESSAGE" value="Update graph plotting and automatic saving all graphs" />
   </component>
   <component name="XDebuggerManager">
     <watches-manager>
Index: Assignment A/old_main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Assignment A/old_main.py b/Assignment A/old_main.py
new file mode 100644
--- /dev/null	(date 1718985902953)
+++ b/Assignment A/old_main.py	(date 1718985902953)
@@ -0,0 +1,343 @@
+from structural_model import StructuralModel
+from bem import BEM
+import numpy as np
+import matplotlib.pyplot as plt
+from matplotlib.ticker import FuncFormatter,ScalarFormatter
+import os
+import itertools
+
+
+save_plot = False
+folder_path = r"C:\Users\olegr\Documents\0. AE Master Wind Energy\Q4 AE4W21-14 Wind Turbine Aeroelasticity\Assignements"
+os.makedirs(folder_path, exist_ok=True)
+def one_decimal(x, pos):
+    return f'{x:.1f}'
+
+def plot_saver(plot_name, save_plot):
+    if save_plot:
+        plt.tight_layout()
+        plt.savefig(os.path.join(folder_path, f'{plot_name}.pdf'))
+        plt.close()
+    else:
+        plt.title(plot_name)
+        plt.tight_layout()
+        plt.show()
+
+def adjust_x_y_ticks(start_plot,end_time):
+    plt.xlim(start_plot,end_time)
+    plt.xticks(range(start_plot, end_time+ 1, 20),  # Tick positions
+               range(0, end_time - start_plot + 1, 20))  # Tick labels
+    ax = plt.gca()
+    ax.yaxis.set_major_formatter(ScalarFormatter(useMathText=True))
+    ax.yaxis.get_offset_text().set_fontsize(10)
+    ax.ticklabel_format(axis='y', style='sci', scilimits=(0, 0))
+
+if __name__ == '__main__':
+    v0 = np.array([3, 4, 5, 6, 7, 8, 9, 10, 11, 11.4, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])
+    rotational_frequancies = np.array(
+        [5.7173, 6.9957, 7.470993355, 7.887136213, 8.396777409, 9.014936877, 10.14196013, 11.27405316, 11.85744186,
+         12.1, 12.10207641, 12.10166113, 12.10111296, 12.10069767, 12.10004983, 12.09983389, 12.09961794, 12.09928571,
+         12.09950166, 12.09960133, 12.09965116, 12.09975083, 12.09945183, 12.09956811])
+
+    rotational_frequancies = rotational_frequancies / 60 * 2 * np.pi
+
+    pitch_angles = np.array(
+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.83, 6.6, 8.7, 10.45, 12.06, 13.54, 14.92, 16.23, 17.47, 18.68, 19.85, 21.02,
+         22.12, 23.15])
+
+    structural_model = StructuralModel(filepath='./Assignment A/structural_data.csv')
+
+
+    print(f'Nat freqs: {structural_model.natural_frequencies}')
+
+    labels = ['Flapwise displacement', 'Edgewise displacement', 'Flapwise force', 'Edgewise force','Root bending moment' ]
+    colors = ["tab:blue","tab:orange","tab:green","tab:red","tab:purple"]
+    plt.figure()
+    N_T = 1000/400
+    start_time = 0
+    start_plot = 400 # time from where you want to plot the output
+    end_time = 500
+    timestamps = np.linspace(0, end_time, int(end_time * N_T))
+
+    N = len(timestamps[int(start_plot * N_T):int(end_time * N_T)])
+    T = timestamps[1] - timestamps[0]
+
+    frequencies = np.fft.fftfreq(N, T)
+    initial_conditions = np.array([0,0,0,0])
+
+    flap_dis_no_stiff = []
+    edge_dis_no_stiff = []
+    flap_vel_no_stiff = []
+    edge_vel_no_stiff = []
+
+    #Static displacement for varyind wind speed 3-25 m/s
+    for v, omega, pitch in zip(v0, rotational_frequancies, pitch_angles):
+        res, Mn, FF, FE = structural_model.calculate_time_response_static_load(timestamps,initial_conditions,v,omega,pitch,geometric_stiffness=False)
+        flap_dis_no_stiff.append(res.y[0,-1])
+        edge_dis_no_stiff.append(res.y[1,-1])
+        flap_vel_no_stiff.append(res.y[2, -1])
+        edge_vel_no_stiff.append(res.y[3, -1])
+
+    plt.plot(v0,flap_dis_no_stiff,label=f'{labels[0]}',color=colors[0])
+    plt.plot(v0,edge_dis_no_stiff,label=f'{labels[1]}',color=colors[1])
+    plt.legend(loc='upper right')
+    plt.grid()
+    plt.gca().yaxis.set_major_formatter(FuncFormatter(one_decimal))
+    plt.xlabel("Wind Speed [m/s]")
+    plt.xlim(v0[0], v0[-1])
+    plt.ylabel("Displacement [m]")
+    plot_name = "Static_displacement_no_geo_stiffening"
+    plot_saver(plot_name,save_plot)
+
+    flap_dis_with_stiff = []
+    edge_dis_with_stiff = []
+    flap_vel_with_stiff = []
+    edge_vel_with_stiff = []
+    #Static displacement for varyind wind speed 3-25 m/s with geometric stiffness
+    for v, omega, pitch in zip(v0, rotational_frequancies, pitch_angles):
+        res, Mn, FF, FE = structural_model.calculate_time_response_static_load(timestamps,initial_conditions,v,omega,pitch,geometric_stiffness=True)
+        flap_dis_with_stiff.append(res.y[0,-1])
+        edge_dis_with_stiff.append(res.y[1,-1])
+        flap_vel_with_stiff.append(res.y[2, -1])
+        edge_vel_with_stiff.append(res.y[3, -1])
+
+    plt.plot(v0,flap_dis_with_stiff,label=f'{labels[0]}',color=colors[0])
+    plt.plot(v0,edge_dis_with_stiff,label=f'{labels[1]}',color=colors[1])
+    plt.legend(loc='upper right')
+    plt.grid()
+    plt.gca().yaxis.set_major_formatter(FuncFormatter(one_decimal))
+    plt.xlabel("Wind Speed [m/s]")
+    plt.xlim(v0[0],v0[-1])
+    plt.ylabel("Displacement [m]")
+    plot_name = "Static_displacement_with_geo_stiffening"
+    plot_saver(plot_name,save_plot)
+
+    #extra plots static displacement
+    max_flap_no_stiff = np.max(flap_dis_no_stiff)
+    max_flap_with_stiff = np.max(flap_dis_with_stiff)
+    plt.plot(v0, flap_dis_no_stiff/max_flap_no_stiff , label='Without geometrical stiffening', color=colors[0])
+    plt.plot(v0,flap_dis_with_stiff/max_flap_with_stiff, label='With geometrical stiffening', color=colors[0],linestyle="--")
+    plt.legend(loc='upper right')
+    plt.grid()
+    plt.gca().yaxis.set_major_formatter(FuncFormatter(one_decimal))
+    plt.xlabel("Wind Speed [m/s]")
+    plt.xlim(v0[0],v0[-1])
+    plt.ylabel("Normalized flapwise displacement [-]")
+    plot_name = "Static_displacement_flapwise"
+    plot_saver(plot_name,save_plot)
+
+    max_edge_no_stiff = np.max(edge_dis_no_stiff)
+    max_edge_with_stiff = np.max(edge_dis_with_stiff)
+    plt.plot(v0, edge_dis_no_stiff/max_edge_no_stiff, label='Without geometrical stiffening',  color=colors[1])
+    plt.plot(v0,edge_dis_with_stiff/max_edge_with_stiff, label='With geometrical stiffening', color=colors[1],linestyle="--")
+    plt.legend(loc='upper right')
+    plt.grid()
+    plt.gca().yaxis.set_major_formatter(FuncFormatter(one_decimal))
+    plt.xlabel("Wind Speed [m/s]")
+    plt.xlim(v0[0],v0[-1])
+    plt.ylabel("Normalized edgewise displacement [-]")
+    plot_name = "Static_displacement_edgewise"
+    plot_saver(plot_name,save_plot)
+
+    wind_speed_dynamic = 15 # m/s
+    index_v0 = np.where(v0 == wind_speed_dynamic)[0][0]
+
+def core_code(periodic_yes_no,blade_velocities_yes_no,geometric_stiffness_yes_no):
+    if periodic_yes_no:
+        add_period = True
+        name_periodic = "periodic_15_ms"
+    else:
+        add_period = False
+        name_periodic = "const_15_ms"
+    if blade_velocities_yes_no:
+        add_blade_vel = True
+        name_periodic = "with_blade_vel"
+    else:
+        add_blade_vel = False
+        name_periodic = "no_blade_vel"
+
+    if geo_stiffness_yes_no:
+        initial_conditions = np.array([flap_dis_with_stiff[index_v0],edge_dis_with_stiff[index_v0],flap_vel_with_stiff[index_v0],edge_vel_with_stiff[index_v0]])
+        add_geo_stiff = True
+        name_geo = "with_geo_stiff"
+    else:
+        initial_conditions = np.array([flap_dis_no_stiff[index_v0], edge_dis_no_stiff[index_v0], flap_vel_no_stiff[index_v0], edge_vel_no_stiff[index_v0]])
+        add_geo_stiff = False
+        name_geo = "no_geo_stiff"
+
+    #Constant velocity of 15 m/s without taking into account the blade velocity
+    res, Mn, FF, FE = structural_model.calculate_time_response_static_load(timestamps, initial_conditions, v0[index_v0],rotational_frequancies[index_v0],pitch_angles[index_v0],geometric_stiffness=add_geo_stiff)
+
+    #Plotting Displacement
+    plt.plot(res.t[int(start_plot * N_T):int(end_time * N_T)], res.y[0, int(start_plot * N_T):int(end_time * N_T)], label=f'{labels[0]}',color=colors[0])
+    plt.legend(loc='upper right')
+    plt.grid()
+    adjust_x_y_ticks(start_plot,end_time)
+    plt.xlabel("Time [s]")
+    plt.ylabel("Tip displacement [m]")
+    plot_name = "Flapwise_disp_const_15ms_no_blade_vel_{}".format(add_to_name)
+    plot_saver(plot_name,save_plot)
+
+    plt.plot(res.t[int(start_plot * N_T):int(end_time * N_T)], res.y[1, int(start_plot * N_T):int(end_time * N_T)], label=f'{labels[1]}',color=colors[1])
+    plt.legend(loc='upper right')
+    plt.grid()
+    adjust_x_y_ticks(start_plot,end_time)
+    plt.xlabel("Time [s]")
+    plt.ylabel("Tip displacement [m]")
+    plot_name = "Edgewise_disp_const_15ms_no_blade_velo_{}".format(add_to_name)
+    plot_saver(plot_name,save_plot)
+
+    #Constant velocity of 15 m/s with taking into account the blade velocity
+    res, Mn_lst, FF_lst, FE_lst= structural_model.calculate_time_response_dynamic_load(timestamps,initial_conditions,v0[index_v0],rotational_frequancies[index_v0],pitch_angles[index_v0],periodic=False,blade_velocities=True,geometric_stiffness=add_geo_stiff)
+    #Time Plot displacement
+    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)], res[0, int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[0]}', color=colors[0])
+    plt.legend(loc='upper right')
+    plt.grid()
+    adjust_x_y_ticks(start_plot,end_time)
+    plt.xlabel("Time [s]")
+    plt.ylabel("Tip displacement [m]")
+    plot_name = "Flapwise_disp_const_15ms_with_blade_vel_{}".format(add_to_name)
+    plot_saver(plot_name,save_plot)
+
+    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)], res[1, int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[1]}', color=colors[1])
+    plt.legend(loc='upper right')
+    plt.grid()
+    adjust_x_y_ticks(start_plot,end_time)
+    plt.xlabel("Time [s]")
+    plt.ylabel("Tip displacement [m]")
+    plot_name = "Edgewise_disp_const_15ms_with_blade_vel_{}".format(add_to_name)
+    plot_saver(plot_name,save_plot)
+
+    #Time plot Forces and Moments
+    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)-1],FF_lst[int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[2]}', color=colors[2])
+    plt.legend(loc='upper right')
+    plt.grid()
+    adjust_x_y_ticks(start_plot,end_time)
+    plt.xlabel("Time [s]")
+    plt.ylabel("Force at tip [N]")
+    plot_name = "Flapwise_force_const_15ms_with_blade_vel_{}".format(add_to_name)
+    plot_saver(plot_name,save_plot)
+
+    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)-1],FE_lst[int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[3]}', color=colors[3])
+    plt.legend(loc='upper right')
+    plt.grid()
+    adjust_x_y_ticks(start_plot,end_time)
+    plt.xlabel("Time [s]")
+    plt.ylabel("Force at tip [N]")
+    plot_name = "Edgewise_force_const_15ms_with_blade_vel_{}".format(add_to_name)
+    plot_saver(plot_name,save_plot)
+
+    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)-1],Mn_lst[int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[4]}', color=colors[4])
+    plt.legend(loc='upper right')
+    plt.grid()
+    adjust_x_y_ticks(start_plot, end_time)
+    plt.xlabel("Time [s]")
+    plt.ylabel("Moment [Nm m]")
+    plot_name = "Root_bend_moment_const_15ms_with_blade_vel_{}".format(add_to_name)
+    plot_saver(plot_name,save_plot)
+
+    #Frequency Plot
+    for i in range(2):
+        fft_values = np.fft.fft(res[i,int(start_plot * N_T):int(end_time * N_T)])
+        magnitude = np.abs(fft_values)
+        plt.plot(frequencies[0:N//2-1], 2*magnitude[0:N//2-1], label=f'{labels[i]}',color=colors[i])
+    plt.yscale('log')
+    plt.legend(loc='upper right')
+    plt.grid()
+    plt.xlabel("Frequency [Hz]")
+    plt.ylabel("Magnitude [-] ")
+    plot_name = "Frequency_plot_const_15ms_with_blade_vel_{}".format(add_to_name)
+    plot_saver(plot_name,save_plot)
+
+
+    #Varying velocity around 15 m/s without taking into account the blade velocity
+    res, Mn_lst, FF_lst, FE_lst = structural_model.calculate_time_response_dynamic_load(timestamps,initial_conditions,v0[index_v0],rotational_frequancies[index_v0],pitch_angles[index_v0],periodic=True,blade_velocities=False,geometric_stiffness=add_geo_stiff)
+    #Time Plot displacement
+    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)], res[0, int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[0]}', color=colors[0])
+    plt.legend(loc='upper right')
+    plt.grid()
+    adjust_x_y_ticks(start_plot, end_time)
+    plt.xlabel("Time [s]")
+    plt.ylabel("Tip displacement [m]")
+    plot_name = "Flapwise_disp_varying_15ms_no_blade_vel_{}".format(add_to_name)
+    plot_saver(plot_name,save_plot)
+
+    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)], res[1, int(start_plot * N_T):int(end_time * N_T)],
+             label=f'{labels[1]}', color=colors[1])
+    plt.legend(loc='upper right')
+    plt.grid()
+    adjust_x_y_ticks(start_plot, end_time)
+    plt.xlabel("Time [s]")
+    plt.ylabel("Tip displacement [m]")
+    plot_name = "Edgewise_displ_varying_15ms_no_blade_vel_{}".format(add_to_name)
+    plot_saver(plot_name,save_plot)
+
+    #Varying velocity around 15 m/s with taking into account the blade velocity
+    res, Mn_lst, FF_lst, FE_lst = structural_model.calculate_time_response_dynamic_load(timestamps,initial_conditions,v0[index_v0],rotational_frequancies[index_v0],pitch_angles[index_v0],periodic=True,blade_velocities=True,geometric_stiffness=add_geo_stiff)
+    #Time Plot Displacement
+    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)], res[0, int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[0]}', color=colors[0])
+    plt.legend(loc='upper right')
+    plt.grid()
+    adjust_x_y_ticks(start_plot, end_time)
+    plt.xlabel("Time [s]")
+    plt.ylabel("Tip displacement [m]")
+    plot_name = "Flapwise_displ_varying_15ms_with_blade_vel_{}".format(add_to_name)
+    plot_saver(plot_name,save_plot)
+
+    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)], res[1, int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[1]}', color=colors[1])
+    plt.legend(loc='upper right')
+    plt.grid()
+    adjust_x_y_ticks(start_plot, end_time)
+    plt.xlabel("Time [s]")
+    plt.ylabel("Tip displacement [m]")
+    plot_name = "Edgewise_displ_varying_15ms_with_blade_vel_{}".format(add_to_name)
+    plot_saver(plot_name,save_plot)
+
+    # Time plot Forces and Moments
+    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)-1],FF_lst[int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[2]}', color=colors[2])
+    plt.legend(loc='upper right')
+    plt.grid()
+    adjust_x_y_ticks(start_plot, end_time)
+    plt.xlabel("Time [s]")
+    plt.ylabel("Force at tip [N]")
+    plot_name = "Flapwise_force_varying_15ms_with_blade_vel_{}".format(add_to_name)
+    plot_saver(plot_name,save_plot)
+
+    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)-1],FE_lst[int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[3]}', color=colors[3])
+    plt.legend(loc='upper right')
+    plt.grid()
+    adjust_x_y_ticks(start_plot, end_time)
+    plt.xlabel("Time [s]")
+    plt.ylabel("Force at tip [N]")
+    plot_name = "Edgewise_force_varying_15ms_with_blade_vel_{}".format(add_to_name)
+    plot_saver(plot_name,save_plot)
+
+    plt.plot(timestamps[int(start_plot * N_T):int(end_time * N_T)-1],Mn_lst[int(start_plot * N_T):int(end_time * N_T)],label=f'{labels[4]}', color=colors[4])
+    plt.legend(loc='upper right')
+    plt.grid()
+    adjust_x_y_ticks(start_plot, end_time)
+    plt.xlabel("Time [s]")
+    plt.ylabel("Moment [Nm m]")
+    plot_name = "Root_bend_moment_varying_15ms_with_blade_vel_{}".format(add_to_name)
+    plot_saver(plot_name,save_plot)
+
+    #Frequency Plot
+    for i in range(2):
+        fft_values = np.fft.fft(res[i,int(start_plot * N_T):int(end_time * N_T)])
+        magnitude = np.abs(fft_values)
+        plt.plot(frequencies[0:N//2-1], 2*magnitude[0:N//2-1], label=f'{labels[i]}',color=colors[i])
+    plt.yscale('log')
+    plt.legend(loc='upper right')
+    plt.grid()
+    plt.xlabel("Frequency [Hz]")
+    plt.ylabel("Magnitude [-] ")
+    plot_name = "Frequency_plot_varying_15ms_with_blade_vel_{}".format(add_to_name)
+    plot_saver(plot_name,save_plot)
+
+
+# Generate all combinations of True and False for three variables
+combinations_variables = list(itertools.product([True, False], repeat=3))
+
+# Iterate over each combination and run the code
+for combo in combinations_variables:
+    run_code(*combo)
